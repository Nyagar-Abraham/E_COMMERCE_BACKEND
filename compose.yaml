
services:
  # =================================================
  #  PostgreSQL Database for all services
  # =================================================
  postgres-db:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass1234
      POSTGRES_MULTIPLE_DATABASES: user_service_db,product_service_db,payment_service_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

# =================================================
#  KAFKA CONTROLLERS
# =================================================
  controller-1:
    image: apache/kafka:latest
    container_name: controller-1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  # =================================================
  #  KAFKA BROKERS
  # =================================================
  broker-1:
    image: apache/kafka:latest
    container_name: broker-1
    ports:
      - 29092:9092
    environment:
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-1:19092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - controller-1
#      - controller-2
#      - controller-3

  broker-2:
    image: apache/kafka:latest
    container_name: broker-2
    ports:
      - 39092:9092
    environment:
      KAFKA_NODE_ID: 5
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-2:19092,PLAINTEXT_HOST://localhost:39092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - controller-1
#      - controller-2
#      - controller-3
  user_service:
    build: ./user_service
    container_name: user_service
    ports:
       - 8082:8082
    depends_on:
      - postgres-db
      - controller-1
      - broker-1
      - broker-2

  api_gateway:
    build: ./apigateway
    container_name: api_gateway
    ports:
      - 8081:8081
    depends_on:
      - postgres-db
      - controller-1
      - broker-1
      - broker-2




#  broker-3:
#    image: apache/kafka:latest
#    container_name: broker-3
#    ports:
#      - 49092:9092
#    environment:
#      KAFKA_NODE_ID: 6
#      KAFKA_PROCESS_ROLES: broker
#      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
#      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-3:19092,PLAINTEXT_HOST://localhost:49092'
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#    depends_on:
#      - controller-1
#      - controller-2
#      - controller-3


#  # Customer Service
#  user-service:
#    build: ./user_service
#    container_name: -service
#    ports:
#      - "8081:8081"
#    environment:
#      SPRING_APPLICATION_NAME: customer-service
#      SERVER_PORT: 8081
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/customer_service_db
#      SPRING_DATASOURCE_USERNAME: postgres
#      SPRING_DATASOURCE_PASSWORD: pass1234
#      SPRING_JPA_HIBERNATE_DDL_AUTO: update
#    depends_on:
#      postgres-db:
#        condition: service_healthy
#
#  # Account Service
#  account-service:
#    build:
#      context: ./account-service
#      dockerfile: Dockerfile
#    container_name: account-service
#    ports:
#      - "8082:8082"
#    environment:
#      SPRING_APPLICATION_NAME: account-service
#      SERVER_PORT: 8082
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/account_service_db
#      SPRING_DATASOURCE_USERNAME: postgres
#      SPRING_DATASOURCE_PASSWORD: pass1234
#      SPRING_JPA_HIBERNATE_DDL_AUTO: update
#    depends_on:
#      postgres-db:
#        condition: service_healthy
#
#  # Card Service
#  card-service:
#    build:
#      context: ./card-service
#      dockerfile: Dockerfile
#    container_name: card-service
#    ports:
#      - "8083:8083"
#    environment:
#      SPRING_APPLICATION_NAME: card-service
#      SERVER_PORT: 8083
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/card_service_db
#      SPRING_DATASOURCE_USERNAME: postgres
#      SPRING_DATASOURCE_PASSWORD: pass1234
#      SPRING_JPA_HIBERNATE_DDL_AUTO: update
#    depends_on:
#      postgres-db:
#        condition: service_healthy

volumes:
  postgres_data:
